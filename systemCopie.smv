
---Memoire ---
MODULE Memory(bus)
VAR
  
  data: array 0..1 of boolean; -- donnee interne a la memoire

  AD:    {0,1}; -- adresses des donnees
  DT:    boolean; -- valeur de retour pour le bus
  CTRL:  {read, write};
  valid: boolean; -- if data is valid

ASSIGN
  init(data[0]) := FALSE;
  init(data[1]) := TRUE;
  init(AD)      := 0;
  init(DT)      := FALSE;
  init(CTRL)    := read;
  init(valid)   := FALSE;

  --- Valeurs internes --- 

  next(data[1]) :=
    case
      bus.cacheValid & bus.CTRL = write & bus.AD = 1: bus.DT;
      TRUE: data[1];
  esac;

  next(data[0]) :=
    case
      bus.cacheValid & bus.CTRL = write & bus.AD = 0: bus.DT;
      TRUE:data[0];
    esac;

  ---Valeurs de sortie vers le BUS ---

  next(AD) :=
    case
      bus.valid: bus.AD;
      TRUE: AD;
    esac;

  next(DT) :=
    case
      bus.valid & bus.CTRL = read: data[bus.AD];
      bus.valid & bus.CTRL = write: bus.DT; -- keep write data from bus in bus out
      TRUE: DT;
    esac;

  next(CTRL) :=
    case
      bus.valid: bus.CTRL;
      TRUE: CTRL;
    esac;

  next(valid) :=
    case
      bus.arb_gnt = mem & bus.DT = DT: TRUE; -- if bus out data is mem data, then valid is TRUE
      TRUE:                            FALSE; -- else valid is false
    esac;



---Cache ---

MODULE Cache(bus, processor, id)
VAR
  
  TAG: {NULL,0,1}; -- cached value tag
  VAL: boolean; -- cached value

  
  AD:   {0,1}; -- addresse
  DT:   boolean; -- donnees transporte
  CTRL: {read, write};
  valid:boolean; -- donnee est valide
  
  req:  boolean; -- requete cache -> bus

  ------------- Computed state -------------
  is_our_request: boolean;
  is_our_response: boolean;
  is_load_response: boolean;
  is_load_in_cache: boolean;

ASSIGN
  is_our_request := bus.AD = AD & bus.CTRL = CTRL;
  is_our_response := req = TRUE & bus.memValid & is_our_request;
  is_load_response := processor.req = load & is_our_response;
  is_load_in_cache := processor.req = load & processor.AD = TAG;

  init(TAG)  := NULL;
  init(DT)   := FALSE;
  init(CTRL) := read;
  init(req)  := FALSE;

  ------------- internal values ------------
  next(TAG) :=
    case
      is_load_response: bus.AD; -- fill cache TAG if the requested data is on the bus
      processor.req = store & processor.AD = TAG: NULL; -- eviction du cache si store a la meme adresse
      TRUE: TAG; -- keep cache in any other configuration
    esac;
  next(VAL) :=
    case
      is_load_response: bus.DT; -- fill cache VAL if the requested data is on the bus
     --- bus.CTRL = write & bus.AD = TAG & bus.memValid: bus.DT; -- SNOOP, fill data if it is the one written on the bus
      TRUE: VAL;
    esac;

  ------------- proc out values ------------
  processor.DT := VAL; -- proc out data is data taken from register
  next(processor.valid) :=
    case
      processor.valid: FALSE; -- always stay valid 1 cycle only
      is_our_response : TRUE; -- proc out is valid after the data on the bus is our response
      is_load_in_cache: TRUE; --                         the data in cache is the required one
      TRUE:             FALSE; -- default is not valid
    esac;
  ------------- bus out values -------------
  AD := processor.AD;
  valid := bus.arb_gnt = id & req;
  next(DT) :=
    case
      is_load_response: bus.DT;
      processor.req = store: processor.VAL;
      TRUE: DT;
    esac;
  next(CTRL) :=
    case
      processor.req = load: read;
      processor.req = store: write;
      TRUE: CTRL;
    esac;
  next(req) :=
    case
      is_our_response :      FALSE;
      processor.req != idle & !processor.valid & !is_load_in_cache: TRUE;
      TRUE:                  req;
    esac;


---BUS---

MODULE Bus
VAR

  AD:      {0,1}; -- addresse de la donnees dans la memoire
  DT:      boolean; -- donnee transporter dans le bus
  CTRL:    {read, write};
  valid:   boolean; -- la donnee sur le bus est valide

  arb_gnt: {none, cacheL1, mem}; -- arbitre de decision

  --- state ---
  memValid:  boolean;
  cacheValid: boolean;

ASSIGN
  memValid := arb_gnt = mem & valid;
  cacheValid := arb_gnt = cacheL1 & valid;




---Processor ---

MODULE Processor
VAR
  
  req:   {idle, load, store}; -- requete processeur -> cache
  AD:    {0,1}; -- adresse visee par requete

  
  VAL:   boolean; -- donnee du processeur

  ------------- cache in values ------------
  DT:    boolean; -- donnee venant du cache
  valid: boolean; -- donnee est valide

ASSIGN
  init(AD)    := 0;
  init(VAL)   := FALSE;
  init(valid) := FALSE;

  
  next(req) :=
    case
      valid: {idle, load, store};
      req = idle: {idle, load, store};
      TRUE: req;
    esac;
  next(AD) :=
    case
      valid: {0,1};
      TRUE: AD;
    esac;
 
  next(VAL) :=
    case
      valid: {TRUE,FALSE};
      TRUE: VAL;
    esac;



--- Main ---

MODULE main
VAR
  bus: Bus;
  processor: Processor;
  memory: Memory(bus);
  cache: Cache(bus, processor, cacheL1);
  

ASSIGN
  
  init(bus.arb_gnt) := none;

  -------------- bus arbitre ---------------
  next(bus.arb_gnt) :=
    case
      cache.req & (bus.memValid | bus.arb_gnt = none) : cacheL1; -- Si la donnees (venant de la memoire) est valide sur le bus, le cacheL1 reprend l'acces au bus
      bus.cacheValid | bus.arb_gnt = mem:               mem; -- si le cache a effectuer une requete, la memoire reprend l'acces au bus au prochain cycle
      TRUE:                                             none; -- default bus master is none 
    esac;

  ------------- bus out values -------------
  bus.AD :=
    case
      bus.arb_gnt = cacheL1: cache.AD;
      TRUE: memory.AD;
    esac;
  bus.DT :=
    case
      bus.arb_gnt = cacheL1: cache.DT;
      TRUE: memory.DT;
    esac;
  bus.CTRL :=
    case
      bus.arb_gnt = cacheL1: cache.CTRL;
      TRUE: memory.CTRL;
    esac;
  bus.valid :=
    case
      bus.arb_gnt = cacheL1: cache.valid;
      TRUE: memory.valid;
    esac;

--------------------------- Specifications ---------------------------
 -- there is a branch where mem is infinitely often the master
SPEC EG EF(bus.arb_gnt = mem)
 -- there is a branch where cacheL1 is infinitely often the master
SPEC EG EF(bus.arb_gnt = cacheL1)


----------------- Specifications bus --------------------
-- if cacheL1 is bus master, then bus out must be l1_in --
SPEC AG ( (bus.arb_gnt = cacheL1) -> (bus.AD = cache.AD & bus.DT = cache.DT & bus.CTRL = cache.CTRL & bus.valid = cache.valid) )
-- if mem is bus master, then bus out must be mem_in --
SPEC AG ( (bus.arb_gnt = mem) -> (bus.AD = memory.AD & bus.DT = memory.DT & bus.valid = memory.valid) )
-- if bus is cacheL1 then it should also be valid (not yes respected) --
-- SPEC AG ( (bus.arb_gnt = cacheL1) -> (bus.valid) )

---------------- Specifications  cache -------------------
-- if cacheL1 reads data, then next value in bus is the requested value and memory response takes 2 cycles --
SPEC AG ( (bus.valid & bus.arb_gnt = cacheL1 & bus.CTRL = read) -> AX AX (bus.DT = memory.data[cache.AD] & memory.valid) )
SPEC EG EF(bus.valid & bus.arb_gnt = cacheL1 & bus.CTRL = read)
-- if cacheL1 writes data, then next value in memory is the written value and memory response takes 2 cycles --
SPEC AG ( (bus.valid & bus.arb_gnt = cacheL1 & bus.CTRL = write) -> AX AX (memory.data[cache.AD] = cache.DT & memory.valid) )
SPEC EG EF(bus.valid & bus.arb_gnt = cacheL1 & bus.CTRL = write)
-- if proc reads data present in cache, then response should be the value of the cache register and should be next cycle --
SPEC AG ( (processor.req = load & processor.AD = cache.TAG & !processor.valid) -> AX (processor.DT = cache.VAL & processor.valid) )
SPEC EG EF(processor.req = load & processor.AD = cache.TAG & !processor.valid)

-------------- Specifications processor -----------------
SPEC EG EF(processor.valid & processor.req != idle)
-- if proc read a data, the the read value must be the same as the one in memory --
SPEC AG ( (processor.valid & processor.req = load) -> (processor.DT = memory.data[processor.AD]) )
-- if proc read a data, the the read value must be the same as the one in memory --
SPEC AG ( (processor.valid & processor.req = store) -> (processor.VAL = memory.data[processor.AD]) )
-- processor can quit idle req state --
SPEC AG ( (processor.req = idle) -> EF (processor.req != idle) )
-- processor can quit load req state --
SPEC AG ( (processor.req = load) -> EF (processor.req != load) )
-- processor can quit store req state --
SPEC AG ( (processor.req = store) -> EF (processor.req != store) )

---------------- other -------------------
-- verify that there are branches whith these cases --
SPEC EG EF(memory.data[0] = TRUE)
SPEC EG EF(memory.data[0] = FALSE)
SPEC EG EF(memory.data[1] = TRUE)
SPEC EG EF(memory.data[1] = FALSE)
SPEC EG EF(cache.AD = 0 & cache.CTRL = read)
SPEC EG EF(cache.AD = 1 & cache.CTRL = read)
SPEC EG EF(cache.AD = 0 & cache.CTRL = write)
SPEC EG EF(cache.AD = 1 & cache.CTRL = write)
SPEC EG EF(cache.is_our_response)
SPEC EG EF(processor.AD = 0 & processor.req = load & processor.VAL = TRUE)
SPEC EG EF(processor.AD = 1 & processor.req = load & processor.VAL = TRUE)
SPEC EG EF(processor.AD = 0 & processor.req = store & processor.VAL = TRUE)
SPEC EG EF(processor.AD = 1 & processor.req = store & processor.VAL = TRUE)
SPEC EG EF(processor.AD = 0 & processor.req = load & processor.VAL = FALSE)
SPEC EG EF(processor.AD = 1 & processor.req = load & processor.VAL = FALSE)
SPEC EG EF(processor.AD = 0 & processor.req = store & processor.VAL = FALSE)
SPEC EG EF(processor.AD = 1 & processor.req = store & processor.VAL = FALSE)

